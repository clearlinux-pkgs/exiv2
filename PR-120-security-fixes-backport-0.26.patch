From 773e29bfccc66d6e08a6d94fa48b4a8b0996ead9 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Dan=20=C4=8Cerm=C3=A1k?= <dan.cermak@cgc-instruments.com>
Date: Tue, 26 Sep 2017 22:57:59 +0200
Subject: [PATCH 01/18] Added missing include for INT_MIN & INT_MAX constants

(cherry picked from commit d4e7510f7c11186bedddc071e5c6ad6ade473da9)
---
 include/exiv2/value.hpp | 1 +
 1 file changed, 1 insertion(+)

diff --git a/include/exiv2/value.hpp b/include/exiv2/value.hpp
index 64a8ca7f5..b61c0f441 100644
--- a/include/exiv2/value.hpp
+++ b/include/exiv2/value.hpp
@@ -44,6 +44,7 @@
 #include <sstream>
 #include <memory>
 #include <cstring>
+#include <climits>
 
 // *****************************************************************************
 // namespace extensions

From 73a4cdb263ce80360dab627bc9425e319d8c9267 Mon Sep 17 00:00:00 2001
From: clanmills <robin@clanmills.com>
Date: Tue, 26 Sep 2017 22:53:45 +0100
Subject: [PATCH 02/18] Adding missing test file.

(cherry picked from commit 9aad5cd6df95315a95141b9c305d437fa82c5d05)
---
 test/data/POC8 | Bin 0 -> 2044 bytes
 1 file changed, 0 insertions(+), 0 deletions(-)
 create mode 100755 test/data/POC8


From 0f3e64641cf29cf3183ba8182c69b9d1a64df509 Mon Sep 17 00:00:00 2001
From: clanmills <robin@clanmills.com>
Date: Fri, 29 Sep 2017 10:00:30 +0100
Subject: [PATCH 06/18]  #49 and #79  Thanks to Dan and Raffael for working
 with me on this.

---
 test/bugfixes-test.sh       |   7 +++++++
 test/data/POC2              | Bin 0 -> 60 bytes
 test/data/bugfixes-test.out | Bin 1929002 -> 1932462 bytes
 3 files changed, 7 insertions(+)
 create mode 100755 test/data/POC2

diff --git a/test/bugfixes-test.sh b/test/bugfixes-test.sh
index c90ae5593..542d7b962 100755
--- a/test/bugfixes-test.sh
+++ b/test/bugfixes-test.sh
@@ -638,6 +638,13 @@ source ./functions.source
     copyTestFile                      $filename
     runTest exiv2                     $filename 2>/dev/null
 
+    num=g79
+    printf "$num " >&3
+    filename=POC2
+    echo '------>' Bug $filename '<-------' >&2
+    copyTestFile                      $filename
+    runTest exiv2                     $filename
+
 ) 3>&1 > $results 2>&1
 
 printf "\n"


From c90991cbdc9c170171965ea0e4bf697c22b3f1f0 Mon Sep 17 00:00:00 2001
From: clanmills <robin@clanmills.com>
Date: Fri, 29 Sep 2017 13:48:14 +0100
Subject: [PATCH 07/18] Fix https://github.com/Exiv2/exiv2/issues/57

---
 test/bugfixes-test.sh       |   7 +++++++
 test/data/POC               | Bin 0 -> 712 bytes
 test/data/bugfixes-test.out | Bin 1932462 -> 1932649 bytes
 3 files changed, 7 insertions(+)
 create mode 100755 test/data/POC

diff --git a/test/bugfixes-test.sh b/test/bugfixes-test.sh
index 542d7b962..8fc8818f1 100755
--- a/test/bugfixes-test.sh
+++ b/test/bugfixes-test.sh
@@ -638,6 +638,13 @@ source ./functions.source
     copyTestFile                      $filename
     runTest exiv2                     $filename 2>/dev/null
 
+    num=g57
+    printf "$num " >&3
+    filename=POC
+    echo '------>' Bug $filename '<-------' >&2
+    copyTestFile                      $filename
+    runTest exiv2                     $filename
+
     num=g79
     printf "$num " >&3
     filename=POC2


From 751312f9aaa7b82b9e8f04326f10fc486e2c8446 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Dan=20=C4=8Cerm=C3=A1k?= <dan.cermak@cgc-instruments.com>
Date: Tue, 3 Oct 2017 00:27:20 +0200
Subject: [PATCH 08/18] Add POC3, POC4, POC5, POC6, POC9, POC11, POC12 & POC13
 to the test suite

These are files which reproduce the github issues #50, #51, #52, #53,
 #54, #58, #59 and #60
---
 test/bugfixes-test.sh       |  56 ++++++++++++++++++++++++++++++++++++
 test/data/POC11             | Bin 0 -> 100 bytes
 test/data/POC12             | Bin 0 -> 68 bytes
 test/data/POC13             | Bin 0 -> 60 bytes
 test/data/POC3              | Bin 0 -> 28 bytes
 test/data/POC4              | Bin 0 -> 35 bytes
 test/data/POC5              | Bin 0 -> 60 bytes
 test/data/POC6              | Bin 0 -> 60 bytes
 test/data/POC9              | Bin 0 -> 523 bytes
 test/data/bugfixes-test.out | Bin 1932649 -> 1933571 bytes
 10 files changed, 56 insertions(+)
 create mode 100644 test/data/POC11
 create mode 100644 test/data/POC12
 create mode 100644 test/data/POC13
 create mode 100644 test/data/POC3
 create mode 100644 test/data/POC4
 create mode 100644 test/data/POC5
 create mode 100644 test/data/POC6
 create mode 100644 test/data/POC9

diff --git a/test/bugfixes-test.sh b/test/bugfixes-test.sh
index 8fc8818f1..38e8f4bb1 100755
--- a/test/bugfixes-test.sh
+++ b/test/bugfixes-test.sh
@@ -652,6 +652,62 @@ source ./functions.source
     copyTestFile                      $filename
     runTest exiv2                     $filename
 
+    num=g52
+    printf "$num " >&3
+    filename=POC5
+    echo '------>' Bug $filename '<-------' >&2
+    copyTestFile                      $filename
+    runTest exiv2                     $filename
+
+    num=g51
+    printf "$num " >&3
+    filename=POC4
+    echo '------>' Bug $filename '<-------' >&2
+    copyTestFile                      $filename
+    runTest exiv2                     $filename
+
+    num=g50
+    printf "$num " >&3
+    filename=POC3
+    echo '------>' Bug $filename '<-------' >&2
+    copyTestFile                      $filename
+    runTest exiv2                     $filename
+
+    num=g53
+    printf "$num " >&3
+    filename=POC6
+    echo '------>' Bug $filename '<-------' >&2
+    copyTestFile                      $filename
+    runTest exiv2                     $filename
+
+    num=g54
+    printf "$num " >&3
+    filename=POC9
+    echo '------>' Bug $filename '<-------' >&2
+    copyTestFile                      $filename
+    runTest exiv2                     $filename
+
+    num=g58
+    printf "$num " >&3
+    filename=POC11
+    echo '------>' Bug $filename '<-------' >&2
+    copyTestFile                      $filename
+    runTest exiv2                     $filename
+
+    num=g59
+    printf "$num " >&3
+    filename=POC12
+    echo '------>' Bug $filename '<-------' >&2
+    copyTestFile                      $filename
+    runTest exiv2                     $filename
+
+    num=g60
+    printf "$num " >&3
+    filename=POC13
+    echo '------>' Bug $filename '<-------' >&2
+    copyTestFile                      $filename
+    runTest exiv2                     $filename
+
 ) 3>&1 > $results 2>&1
 
 printf "\n"


From 79d814c722a8f03931cea2b5447a7a11fe26f2c3 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Micha=C5=82=20Walenciak?= <Kicer86@gmail.com>
Date: Mon, 2 Oct 2017 21:45:05 +0200
Subject: [PATCH 09/18] Adding comment for issue #56

---
 src/image.cpp | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/image.cpp b/src/image.cpp
index 199671b9b..929d49760 100644
--- a/src/image.cpp
+++ b/src/image.cpp
@@ -400,7 +400,7 @@ namespace Exiv2 {
 
                 // if ( offset > io.size() ) offset = 0; // Denial of service?
 
-                // #55 memory allocation crash test/data/POC8
+                // #55 and #56 memory allocation crash test/data/POC8
                 long long allocate = (long long) size*count + pad+20;
                 if ( allocate > (long long) io.size() ) {
                     throw Error(57);

From 1f1715c086d8dcdf5165b19164af9aee7aa12e98 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Dan=20=C4=8Cerm=C3=A1k?= <dan.cermak@cgc-instruments.com>
Date: Fri, 6 Oct 2017 00:37:43 +0200
Subject: [PATCH 10/18] =?UTF-8?q?Use=20nullptr=20check=20instead=20of=20as?=
 =?UTF-8?q?sertion,=20by=20Rapha=C3=ABl=20Hertzog?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Source:
https://github.com/Exiv2/exiv2/issues/57#issuecomment-333086302

tc can be a null pointer when the TIFF tag is unknown (the factory
then returns an auto_ptr(0)) => as this can happen for corrupted
files, an explicit check should be used because an assertion can be
turned of in release mode (with NDEBUG defined)

This also fixes #57
---
 src/tiffvisitor.cpp | 11 ++++++-----
 1 file changed, 6 insertions(+), 5 deletions(-)

diff --git a/src/tiffvisitor.cpp b/src/tiffvisitor.cpp
index 74f8d0780..4ab733d47 100644
--- a/src/tiffvisitor.cpp
+++ b/src/tiffvisitor.cpp
@@ -1294,11 +1294,12 @@ namespace Exiv2 {
             }
             uint16_t tag = getUShort(p, byteOrder());
             TiffComponent::AutoPtr tc = TiffCreator::create(tag, object->group());
-            // The assertion typically fails if a component is not configured in
-            // the TIFF structure table
-            assert(tc.get());
-            tc->setStart(p);
-            object->addChild(tc);
+            if (tc.get()) {
+                tc->setStart(p);
+                object->addChild(tc);
+            } else {
+               EXV_WARNING << "Unable to handle tag " << tag << ".\n";
+            }
             p += 12;
         }
 

From a2f25c9a63cccf3ecb17a23747e5d7d20982075a Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Dan=20=C4=8Cerm=C3=A1k?= <dan.cermak@cgc-instruments.com>
Date: Fri, 6 Oct 2017 23:08:01 +0200
Subject: [PATCH 11/18] Added new error message to warn about corrupted
 metadata

---
 src/error.cpp | 1 +
 1 file changed, 1 insertion(+)

diff --git a/src/error.cpp b/src/error.cpp
index e90a9c0ac..f2edf4dd5 100644
--- a/src/error.cpp
+++ b/src/error.cpp
@@ -109,6 +109,7 @@ namespace {
         { 55, N_("tiff directory length is too large") },
         { 56, N_("invalid type value detected in Image::printIFDStructure") },
         { 57, N_("invalid memory allocation request") },
+        { 58, N_("corrupted image metadata") },
     };
 
 }

From 6ede8aa1975177705450abb816163f0b8d33a597 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Dan=20=C4=8Cerm=C3=A1k?= <dan.cermak@cgc-instruments.com>
Date: Fri, 6 Oct 2017 23:09:08 +0200
Subject: [PATCH 12/18] Fix for CVE-2017-14860

A heap buffer overflow could occur in memcpy when icc.size_ is larger
than data.size_ - pad, as then memcpy would read out of bounds of data.

This commit adds a sanity check to iccLength (= icc.size_): if it is
larger than data.size_ - pad (i.e. an overflow would be caused) an
exception is thrown.

This fixes #71.
---
 src/jp2image.cpp | 9 +++++++--
 1 file changed, 7 insertions(+), 2 deletions(-)

diff --git a/src/jp2image.cpp b/src/jp2image.cpp
index 1892fd43b..09d023e25 100644
--- a/src/jp2image.cpp
+++ b/src/jp2image.cpp
@@ -269,10 +269,15 @@ namespace Exiv2
                             std::cout << "Exiv2::Jp2Image::readMetadata: "
                                      << "Color data found" << std::endl;
 #endif
-                            long pad = 3 ; // 3 padding bytes 2 0 0
+                            const long pad = 3 ; // 3 padding bytes 2 0 0
                             DataBuf data(subBox.length+8);
                             io_->read(data.pData_,data.size_);
-                            long    iccLength = getULong(data.pData_+pad, bigEndian);
+                            const long    iccLength = getULong(data.pData_+pad, bigEndian);
+                            // subtracting pad from data.size_ is safe:
+                            // size_ is at least 8 and pad = 3
+                            if (iccLength > data.size_ - pad) {
+                                throw Error(58);
+			    }
                             DataBuf icc(iccLength);
                             ::memcpy(icc.pData_,data.pData_+pad,icc.size_);
 #ifdef DEBUG

From fd3711f91b842a9f4ed6e074e97888eb75ed0aa3 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Dan=20=C4=8Cerm=C3=A1k?= <dan.cermak@cgc-instruments.com>
Date: Fri, 6 Oct 2017 23:11:39 +0200
Subject: [PATCH 13/18] Added the reproducer for CVE-2017-14860 to the test
 suite

---
 test/bugfixes-test.sh          |   7 +++++++
 test/data/003-heap-buffer-over | Bin 0 -> 7629 bytes
 test/data/bugfixes-test.out    | Bin 1933571 -> 1933701 bytes
 3 files changed, 7 insertions(+)
 create mode 100644 test/data/003-heap-buffer-over

diff --git a/test/bugfixes-test.sh b/test/bugfixes-test.sh
index 38e8f4bb1..eeed771f7 100755
--- a/test/bugfixes-test.sh
+++ b/test/bugfixes-test.sh
@@ -708,6 +708,13 @@ source ./functions.source
     copyTestFile                      $filename
     runTest exiv2                     $filename
 
+    num=g71
+    printf "$num " >&3
+    filename=003-heap-buffer-over
+    echo '------>' Bug $filename '<-------' >&2
+    copyTestFile                      $filename
+    runTest exiv2                     $filename
+
 ) 3>&1 > $results 2>&1
 
 printf "\n"


From da67c16f3d8f8431ae5c732126499f74ccca6a81 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Dan=20=C4=8Cerm=C3=A1k?= <dan.cermak@cgc-instruments.com>
Date: Sat, 7 Oct 2017 23:07:26 +0200
Subject: [PATCH 14/18] Added arithmetic operation overflow error

---
 src/error.cpp | 1 +
 1 file changed, 1 insertion(+)

diff --git a/src/error.cpp b/src/error.cpp
index f2edf4dd5..5d63957d3 100644
--- a/src/error.cpp
+++ b/src/error.cpp
@@ -110,6 +110,7 @@ namespace {
         { 56, N_("invalid type value detected in Image::printIFDStructure") },
         { 57, N_("invalid memory allocation request") },
         { 58, N_("corrupted image metadata") },
+        { 59, N_("Arithmetic operation overflow") },
     };
 
 }

From d4e4288d839d0d9546a05986771f8738c382060c Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Dan=20=C4=8Cerm=C3=A1k?= <dan.cermak@cgc-instruments.com>
Date: Sat, 7 Oct 2017 23:08:36 +0200
Subject: [PATCH 15/18] Fix for CVE-2017-14864, CVE-2017-14862 and
 CVE-2017-14859

The invalid memory dereference in
Exiv2::getULong()/Exiv2::StringValueBase::read()/Exiv2::DataValue::read()
is caused further up the call-stack, by
v->read(pData, size, byteOrder) in TiffReader::readTiffEntry()
passing an invalid pData pointer (pData points outside of the Tiff
file). pData can be set out of bounds in the (size > 4) branch where
baseOffset() and offset are added to pData_ without checking whether
the result is still in the file. As offset comes from an untrusted
source, an attacker can craft an arbitrarily large offset into the
file.

This commit adds a check into the problematic branch, whether the
result of the addition would be out of bounds of the Tiff
file. Furthermore the whole operation is checked for possible
overflows.
---
 src/tiffvisitor.cpp | 13 +++++++++++++
 1 file changed, 13 insertions(+)

diff --git a/src/tiffvisitor.cpp b/src/tiffvisitor.cpp
index 4ab733d47..ef13542e7 100644
--- a/src/tiffvisitor.cpp
+++ b/src/tiffvisitor.cpp
@@ -47,6 +47,7 @@ EXIV2_RCSID("@(#) $Id$")
 #include <iostream>
 #include <iomanip>
 #include <cassert>
+#include <limits>
 
 // *****************************************************************************
 namespace {
@@ -1517,7 +1518,19 @@ namespace Exiv2 {
                 size = 0;
         }
         if (size > 4) {
+            // setting pData to pData_ + baseOffset() + offset can result in pData pointing to invalid memory,
+            // as offset can be arbitrarily large
+            if ((static_cast<uintptr_t>(baseOffset()) > std::numeric_limits<uintptr_t>::max() - static_cast<uintptr_t>(offset))
+             || (static_cast<uintptr_t>(baseOffset() + offset) > std::numeric_limits<uintptr_t>::max() - reinterpret_cast<uintptr_t>(pData_)))
+            {
+                throw Error(59);
+            }
+            if (pData_ + static_cast<uintptr_t>(baseOffset()) + static_cast<uintptr_t>(offset) > pLast_) {
+                throw Error(58);
+            }
             pData = const_cast<byte*>(pData_) + baseOffset() + offset;
+
+	    // check for size being invalid
             if (size > static_cast<uint32_t>(pLast_ - pData)) {
 #ifndef SUPPRESS_WARNINGS
                 EXV_ERROR << "Upper boundary of data for "

From c2c9fab580f8d6ea237718ad63921cde1d8980f7 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Dan=20=C4=8Cerm=C3=A1k?= <dan.cermak@cgc-instruments.com>
Date: Sat, 7 Oct 2017 23:19:13 +0200
Subject: [PATCH 16/18] Added check for overflows in calculation of size

---
 src/tiffvisitor.cpp | 4 ++++
 1 file changed, 4 insertions(+)

diff --git a/src/tiffvisitor.cpp b/src/tiffvisitor.cpp
index ef13542e7..6906c0637 100644
--- a/src/tiffvisitor.cpp
+++ b/src/tiffvisitor.cpp
@@ -1495,6 +1495,10 @@ namespace Exiv2 {
         }
         p += 4;
         uint32_t isize= 0; // size of Exif.Sony1.PreviewImage
+
+        if (count > std::numeric_limits<uint32_t>::max() / typeSize) {
+            throw Error(59);
+        }
         uint32_t size = typeSize * count;
         uint32_t offset = getLong(p, byteOrder());
         byte* pData = p;

From 1841c2afd79db92180286e175d574500745f5412 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Dan=20=C4=8Cerm=C3=A1k?= <dan.cermak@cgc-instruments.com>
Date: Sat, 7 Oct 2017 23:20:40 +0200
Subject: [PATCH 17/18] Added exception throw on Value pointer being null

v can be null if the typeId is invalid => throw an exception notifying
the user that his file is corrupted instead of the assertion
---
 src/tiffvisitor.cpp | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

diff --git a/src/tiffvisitor.cpp b/src/tiffvisitor.cpp
index 6906c0637..49fbf9616 100644
--- a/src/tiffvisitor.cpp
+++ b/src/tiffvisitor.cpp
@@ -1554,7 +1554,9 @@ namespace Exiv2 {
             }
         }
         Value::AutoPtr v = Value::create(typeId);
-        assert(v.get());
+        if (!v.get()) {
+            throw Error(58);
+        }
         if ( !isize ) {
         	v->read(pData, size, byteOrder());
         } else {

From 1b01704e7ab456bf6b716c3bd072701e0871f490 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Dan=20=C4=8Cerm=C3=A1k?= <dan.cermak@cgc-instruments.com>
Date: Sat, 7 Oct 2017 23:21:57 +0200
Subject: [PATCH 18/18] Added reproducers for #73, #74 and #75 to the test
 suite

---
 test/bugfixes-test.sh        |  21 +++++++++++++++++++++
 test/data/005-invalid-mem    | Bin 0 -> 20027 bytes
 test/data/008-invalid-mem    | Bin 0 -> 7905 bytes
 test/data/02-Invalid-mem-def | Bin 0 -> 30106 bytes
 test/data/bugfixes-test.out  | Bin 1933701 -> 1935689 bytes
 5 files changed, 21 insertions(+)
 create mode 100644 test/data/005-invalid-mem
 create mode 100644 test/data/008-invalid-mem
 create mode 100644 test/data/02-Invalid-mem-def

diff --git a/test/bugfixes-test.sh b/test/bugfixes-test.sh
index eeed771f7..97f254b23 100755
--- a/test/bugfixes-test.sh
+++ b/test/bugfixes-test.sh
@@ -715,6 +715,27 @@ source ./functions.source
     copyTestFile                      $filename
     runTest exiv2                     $filename
 
+    num=g73
+    printf "$num " >&3
+    filename=02-Invalid-mem-def
+    echo '------>' Bug $filename '<-------' >&2
+    copyTestFile                      $filename
+    runTest exiv2                     $filename
+
+    num=g74
+    printf "$num " >&3
+    filename=005-invalid-mem
+    echo '------>' Bug $filename '<-------' >&2
+    copyTestFile                      $filename
+    runTest exiv2                     $filename
+
+    num=g75
+    printf "$num " >&3
+    filename=008-invalid-mem
+    echo '------>' Bug $filename '<-------' >&2
+    copyTestFile                      $filename
+    runTest exiv2                     $filename
+
 ) 3>&1 > $results 2>&1
 
 printf "\n"

